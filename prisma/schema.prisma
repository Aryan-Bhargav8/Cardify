datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String @id @default(uuid()) @map("_id")
  clerk_id String @unique
  name     String
  imageUrl String
  email    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Files             File[]
  playlists         Playlist[]
  posts             Post[]  // Add relation to Post
  likes             Like[]  // Add relation to Like
}

model Post {
  id      String   @id @default(uuid()) @map("_id")
  title   String
  content String
  likes   Int      @default(0) // To track the like count

  user    User     @relation(fields: [userId], references: [id])
  userId  String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likesData Like[]   // Relation to the Like model
}

model Like {
  id      String   @id @default(uuid()) @map("_id")
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @db.ObjectId
  post    Post     @relation(fields: [postId], references: [id])
  postId  String   @db.ObjectId
  createdAt DateTime @default(now())
}

model File {
  id String @id @default(uuid()) @map("_id")

  title String
  path  String    @unique
  state FileState

  user   User   @relation(fields: [userId], references: [id])
  userId String

  fileContent FileContent?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileContent {
  id String @id @default(uuid()) @map("_id")

  fileId String @unique
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id String @id @default(uuid()) @map("_id")

  Cards Card[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id String @id @default(uuid()) @map("_id")

  addedAt DateTime @default(now())

  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FileState {
  UPLOADING
  PROCESSING
  EXTRACTING
  COMPLETE
}
